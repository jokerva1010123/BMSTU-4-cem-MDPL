Microsoft (R) Macro Assembler Version 5.10                  12/4/13 15:26:35
                                                             Page     1-1


       1				;2.	Составить процедуру, проверяющу
					ю соответствие начала заданной последов
					ательности символов синтаксической диаг
					рамме бесскобочного выражения
       2				;в процедуре для проверки, что очередно
					й символ анализируемой последовательнос
					ти является знаком операции, использова
					ть таблицу их перекодирования,
       3				;команду XLAT и одну команду сравнения.
       4				;Процедура должна возвращать:
       5				;	через регистр AX значение 0 при
					 соответствии и через регистр SI – номе
					р первого символа последовательности, н
					а котором закончился анализ, 
       6				;	значение 1 в AX, если первый си
					мвол не цифра и не знак минус,
       7				;	значение 2 в AX, если превышено
					 число операндов в выражении,  и через 
					регистр SI – номер первого символа посл
					едовательности, на котором закончился а
					нализ.
       8				;	значение 3 в AX, если текст, пр
					едшествующий символу, на котором законч
					ился анализ, не является арифметическим
					 выражением.
       9				
      10				
      11				
      12				
      13 0000				Data	SEGMENT
      14 = 0006					OpNum	EQU	6
      15					;таблица: ...* + , - . / 0..9 .
					..
      16 0000  002A[				OpTab	DB 42 DUP (0)	;мусор
      17	   00			
      18			 ]	
      19				
      20 002A  01 01 00 01 00 01				DB 1,1,0,1,0,1
						;арифметика
      21 0030  000A[						DB 10 DUP (2)
						;цифры
      22	   02			
      23			 ]	
      24				
      25 003A  00C6[						DB 198 DUP (0)
						;мусор
      26	   00			
      27			 ]	
      28				
      29							   ;123456789
      30					;Expr1	DB '-1*2+3/4'	,'$'
      31					;Expr1	DB '+5*6+7-8'	,'$'
      32					;Expr1	DB '1-2/+3*'	,'$'
      33 0100  31 2D 32 2F 63 33		Expr1	DB '1-2/c3'	,'$'
Microsoft (R) Macro Assembler Version 5.10                  12/4/13 15:26:35
                                                             Page     1-2


      34       24			
      35					;Expr1	DB '1+1+1+1+1+1+1+1'
						,'$'
      36 0107  00				Expr2	DB (?)
      37 0108  0D 0A 24				sNewL	DB 13,10,'$'
      38 010B  41 58 20 28 72 65		sAX		DB 'AX (result)
					 == ','$'
      39       73 75 6C 74 29 20	
      40       3D 3D 20 24		
      41 011B  53 49 20 28 6E 75		sSI		DB 'SI (number)
					 == ','$'
      42       6D 62 65 72 29 20	
      43       3D 3D 20 24		
      44 012B				Data	ENDS
      45				
      46				
      47				
      48				
      49				
      50 0000				Code	SEGMENT
      51					ASSUME CS:Code, DS:Data, SS:Sta
					ck
      52				
      53				;------------------------------
      54				;проверяет строку находящуюся в DX, дли
					ной CX
      55				;поочередно определяем, является символ
					 мусором, цифрой или операцией
      56 0000				PR_CheckExpr	PROC	NEAR
      57				;------------------------------
      58					;изначально - в ДХ лежит АДРЕС 
					строки для анализа
      59 0000  8B F2				MOV		SI,DX	
						;адрес поместим в DI, потомучто
					 его можно [разыменовывать]
      60 0002  8D 1E 0000 R			LEA		BX,OpTab
						;в BX подготовим таблицу переко
					дировок в нули и единички
      61 0006  8A 04				MOV		AL,[SI]	
						;в АЛ засунем ЗНАЧЕНИЕ по АДРЕС
					У строки (первый элемент)
      62 0008  50				PUSH	AX		
						;сохраним этот элемент для пров
					ерки после перекодировки
      63 0009  D7				XLAT
      64 000A  3C 02				CMP		AL,2	
						;перекодировали, проверяем, пер
					вый символ - цифра?
      65 000C  58				POP		AX
      66 000D  74 0A				JE		PRCE_SkipFirst 
					;если число то и замечательно, пошли от
					сюда
      67					;если же НЕ число
      68 000F  3C 2D				CMP		AL,'-'	
Microsoft (R) Macro Assembler Version 5.10                  12/4/13 15:26:35
                                                             Page     1-3


						;восстановили, проверяем, первы
					й символ - минус?
      69 0011  74 06				JE		PRCE_SkipFirst 
					;если минус то всё прекрасно
      70 0013  B8 0001					MOV		AX,1
						;возвращаем в АХ 1 - первый сим
					вол не минус и не цифра
      71 0016  2B F2					SUB		SI,DX
						;возвращаем в СИ номер символа 
					строки, на котором закончили
      72 0018  C3					RET
      73 0019					PRCE_SkipFirst:
      74					
      75					;определили что в первом символ
					е, замечательно! теперь проходимся ПО О
					СТАВШЕЙСЯ строке
      76 0019  49				DEC		CX
      77 001A  BF 0000				MOV		DI,0	;в ДИ б
					удем хранить число найденных операндов
      78 001D					PRCE_Loop:
      79 001D  46					INC		SI
      80 001E  8A 04					MOV		AL,[SI]
      81 0020  D7					XLAT	;перекодировыва
					ем содержимое АЛ: мусор->0, операнд->1,
					 цифра->2
      82						;проверяем символ на пр
					инадлежность, если он в группе цифр(2) 
					- то не делаем ничего
      83						;если в группе операндо
					в(1) - то проверяем, не достигнут ли пр
					едел
      84						;если в группе мусора(0
					) - то выходим из процедуры
      85 0021  3C 01					CMP		AL,1
									
      86 0023  72 0B					JB		PRCE_Ch
					eckGarbage
      87 0025  74 10					JE		PRCE_Ch
					eckOperand
      88 0027  E2 F4						LOOP PRCE_Loop
							;выполнится, если не <=
					, то есть >, то есть АЛ==2
      89 0029  B8 0000							MOV
							AX,0	;выполнится, ес
					ли текущий символ - последний
      90 002C  46							INC
							SI		;для пр
					остоты понимания инкаем СИ, чтобы первы
					й символ был №1 а не №0
      91 002D  2B F2							SUB
							SI,DX
      92 002F  C3							RET
      93 0030						PRCE_CheckGarbage:
							;если мусор - то бежим 
Microsoft (R) Macro Assembler Version 5.10                  12/4/13 15:26:35
                                                             Page     1-4


					отсюда
      94 0030  B8 0003						MOV	
						AX,3
      95 0033  46						INC	
						SI		;для простоты п
					онимания
      96 0034  2B F2						SUB	
						SI,DX
      97 0036  C3						RET
      98 0037						PRCE_CheckOperand:
							;если операнд - смотрим
					 не пора ли сбежать
      99 0037  83 FF 06						CMP	
						DI,OpNum
     100 003A  7C 07						JL	
						PRCE_SkipLimit ;если до этого о
					перандов, операндов<максимума, то всё в
					 порядке, иначе - выходим
     101 003C  B8 0002							MOV
							AX,2
     102 003F  46							INC
							SI		;для пр
					остоты понимания
     103 0040  2B F2							SUB
							SI,DX
     104 0042  C3							RET
     105 0043							PRCE_SkipLimit:
     106 0043  47						INC	
						DI ;запоминаем что у нас стало 
					на один операнд больше
     107						;MOV		AH,2
						;	тестовая печать
     108						;MOV		DL,AL
     109						;ADD		DL,'0'
     110						;INT		21h
     111 0044  E2 D7				LOOP PRCE_Loop
     112					;если дошли досюда - то последн
					ий символ является операндом
     113					;поэтому вернем в АХ 4
     114 0046  B8 0004					MOV		AX,4
     115 0049  46					INC		SI
							;для простоты понимания
     116 004A  2B F2					SUB		SI,DX
     117 004C  C3				RET
     118 004D				PR_CheckExpr	ENDP
     119				;------------------------------
     120					
     121					
     122 004D				START:
     123 004D  B8 ---- R			MOV	AX,Data
     124 0050  8E D8				MOV	DS,AX
     125				
     126					;печать выражения
     127 0052  B4 09				MOV		AH,9
Microsoft (R) Macro Assembler Version 5.10                  12/4/13 15:26:35
                                                             Page     1-5


     128 0054  8D 16 0100 R			LEA		DX,Expr1
							;подготавливаем выражен
					ие 1
     129 0058  CD 21				INT		21h	
									;кастуе
					м печать ^
     130 005A  8D 16 0108 R			LEA		DX,sNewL
							;подготавливаем перенос
					 строки
     131 005E  CD 21				INT		21h
     132					
     133 0060  8D 16 0100 R			LEA		DX,Expr1
							;обрабатывать будем Ехп
					р1
     134 0064  B9 0107 R			MOV		CX,OFFSET Expr2
     135 0067  2B CA				SUB		CX,DX	
							;в СХ получается длина 
					Ехпр1
     136 0069  49				DEC		CX	
								;дек - потому ч
					то ^ длина ВМЕСТЕ С ЗАКРЫВАЮЩИМ СИМВОЛО
					М
     137 006A  E8 0000 R			CALL	PR_CheckExpr	;вызыва
					ем проверку выражения в DX
     138					
     139					;печать значения АХ
     140 006D  50				PUSH	AX
     141 006E  8D 16 010B R			LEA		DX,sAX
     142 0072  B4 09				MOV		AH,9
     143 0074  CD 21				INT		21h
     144 0076  58				POP		AX
     145 0077  B4 02				MOV		AH,2
     146 0079  8A D0				MOV		DL,AL
     147 007B  80 C2 30				ADD		DL,'0'
     148 007E  CD 21				INT		21h
     149 0080  B4 09				MOV		AH,9
     150 0082  8D 16 0108 R			LEA		DX,sNewL
     151 0086  CD 21				INT		21h
     152					;печать значения SI
     153 0088  8D 16 011B R			LEA		DX,sSI
     154 008C  B4 09				MOV		AH,9
     155 008E  CD 21				INT		21h	
     156 0090  B4 02				MOV		AH,2
     157 0092  8B D6				MOV		DX,SI
     158 0094  B6 00				MOV		DH,0
     159 0096  80 C2 30				ADD		DL,'0'
     160 0099  CD 21				INT		21h
     161 009B  B4 09				MOV		AH,9
     162 009D  8D 16 0108 R			LEA		DX,sNewL
     163 00A1  CD 21				INT		21h
     164					
     165					
     166					
     167 00A3  B0 00				MOV		AL,0	
Microsoft (R) Macro Assembler Version 5.10                  12/4/13 15:26:35
                                                             Page     1-6


						;выход
     168 00A5  B4 4C				MOV		AH,4Ch
     169 00A7  CD 21				INT		21h
     170				
     171 00A9				Code	ENDS
     172				
     173				
     174				
     175				
     176				
     177 0000				Stack	SEGMENT STACK
     178 0000  0128[				DW	128h DUP (?)
     179	   ????			
     180			 ]	
     181				
     182 0250				Stack	ENDS
     183				
     184					END START
Microsoft (R) Macro Assembler Version 5.10                  12/4/13 15:26:35
                                                             Symbols-1


Segments and Groups:

                N a m e         	Length	 Align	Combine Class

CODE . . . . . . . . . . . . . .  	00A9	PARA	NONE	
DATA . . . . . . . . . . . . . .  	012B	PARA	NONE	
STACK  . . . . . . . . . . . . .  	0250	PARA	STACK	

Symbols:            

                N a m e         	Type	 Value	 Attr

EXPR1  . . . . . . . . . . . . .  	L BYTE	0100	DATA
EXPR2  . . . . . . . . . . . . .  	L BYTE	0107	DATA

OPNUM  . . . . . . . . . . . . .  	NUMBER	0006	
OPTAB  . . . . . . . . . . . . .  	L BYTE	0000	DATA	Length = 002A

PRCE_CHECKGARBAGE  . . . . . . .  	L NEAR	0030	CODE
PRCE_CHECKOPERAND  . . . . . . .  	L NEAR	0037	CODE
PRCE_LOOP  . . . . . . . . . . .  	L NEAR	001D	CODE
PRCE_SKIPFIRST . . . . . . . . .  	L NEAR	0019	CODE
PRCE_SKIPLIMIT . . . . . . . . .  	L NEAR	0043	CODE
PR_CHECKEXPR . . . . . . . . . .  	N PROC	0000	CODE	Length = 004D

SAX  . . . . . . . . . . . . . .  	L BYTE	010B	DATA
SNEWL  . . . . . . . . . . . . .  	L BYTE	0108	DATA
SSI  . . . . . . . . . . . . . .  	L BYTE	011B	DATA
START  . . . . . . . . . . . . .  	L NEAR	004D	CODE

@CPU . . . . . . . . . . . . . .  	TEXT  0101h		
@FILENAME  . . . . . . . . . . .  	TEXT  l5_2		
@VERSION . . . . . . . . . . . .  	TEXT  510		


    167 Source  Lines
    167 Total   Lines
     26 Symbols

  47408 + 453707 Bytes symbol space free

      0 Warning Errors
      0 Severe  Errors
